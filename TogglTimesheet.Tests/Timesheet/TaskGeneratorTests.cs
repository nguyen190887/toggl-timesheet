// Generated by Copilot
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using TogglTimesheet.Timesheet;

namespace TogglTimesheet.Tests.Timesheet
{
    [ExcludeFromCodeCoverage]
    public class TaskGeneratorTests
    {
        private readonly TaskGenerator _taskGenerator;

        public TaskGeneratorTests()
        {
            var taskRules = new List<TaskRule>()
            {
                new TaskRule
                {
                    Expression = "description.StartsWith(\"DC\") && description.Contains(\"interview\")",
                    TaskName = TaskConstants.DC_Itv
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"DC\") && (description.Contains(\"productivity\") || description.Contains(\"initiatives\"))",
                    TaskName = TaskConstants.DC_Prod
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"DC\") && (description.Contains(\"propo\") || description.Contains(\"pro.\"))",
                    TaskName = TaskConstants.DC_Pro
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"DC\") && description.Contains(\"support\")",
                    TaskName = TaskConstants.DC_Support
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"DC\") && description.Contains(\"iqbr\")",
                    TaskName = TaskConstants.DC_IQ
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"A -\") && description.Contains(\"night meeting\")",
                    TaskName = TaskConstants.P1_NM
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"A -\")",
                    TaskName = TaskConstants.P1_Tasks
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"Atd -\") && description.Contains(\"night meeting\")",
                    TaskName = TaskConstants.A1_NM
                },
                new TaskRule
                {
                    Expression = "description.StartsWith(\"Atd -\")",
                    TaskName = TaskConstants.A1_Tasks
                },
                new TaskRule
                {
                    Expression = "project == \"Self-Development\" || description.ContainsIgnoreCase(\"learning\")",
                    TaskName = TaskConstants.Learning
                },
                new TaskRule
                {
                    Expression = "project == \"Innovation\"",
                    TaskName = TaskConstants.Innovation
                }
            };
            _taskGenerator = new TaskGenerator(taskRules);
        }

        [Theory]
        [InlineData("DC - interview: case 1", "", TaskConstants.DC_Itv)]
        [InlineData("DC - productivity: meeting", "", TaskConstants.DC_Prod)]
        [InlineData("DC - initiatives: activity", "", TaskConstants.DC_Prod)]
        [InlineData("DC - propo__", "", TaskConstants.DC_Pro)]
        [InlineData("DC - pro. - proj X", "", TaskConstants.DC_Pro)]
        [InlineData("DC - support", "", TaskConstants.DC_Support)]
        [InlineData("DC - iqbr", "", TaskConstants.DC_IQ)]
        [InlineData("A - night meeting", "", TaskConstants.P1_NM)]
        [InlineData("A - some task", "", TaskConstants.P1_Tasks)]
        [InlineData("Atd - night meeting", "", TaskConstants.A1_NM)]
        [InlineData("Atd - some task", "", TaskConstants.A1_Tasks)]
        [InlineData("Some description", "Self-Development", TaskConstants.Learning)]
        [InlineData("Learning something new", "", TaskConstants.Learning)]
        [InlineData("Some description", "Innovation", TaskConstants.Innovation)]
        [InlineData("Unknown task", "Unknown project", TaskConstants.Unknown)]
        public void GenerateTask_ShouldReturnExpectedTaskName(
            string description,
            string project,
            string expectedTaskName)
        {
            // Act
            var result = _taskGenerator.GenerateTask(description, project);

            // Assert
            Assert.Equal(expectedTaskName, result);
        }
    }
}
