// Generated by Copilot
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using CsvHelper;
using Moq;
using TogglTimesheet.Timesheet;

namespace TogglTimesheet.Tests.Timesheet
{
    [ExcludeFromCodeCoverage]
    public class TimesheetGeneratorTests
    {
        [Fact]
        public void ProcessEntries_ShouldCollectUnknownTasks()
        {
            // Arrange
            var mockTaskGenerator = new Mock<ITaskGenerator>();
            var mockDataProvider = new Mock<IDataProvider>();

            var timeEntries = new List<TimeEntry>
            {
                new()
                {
                    RawStartDate = "2023-10-01",
                    RawDuration = "02:30:00",
                    Project = "ProjectA",
                    Description = "Task1"
                },
                new()
                {
                    RawStartDate = "2023-10-01",
                    RawDuration = "01:00:00",
                    Project = "ProjectA",
                    Description = "UnknownTask1"
                },
                new()
                {
                    RawStartDate = "2023-10-02",
                    RawDuration = "03:00:00",
                    Project = "ProjectB",
                    Description = "UnknownTask2"
                }
            };

            mockTaskGenerator.Setup(tg => tg.GenerateTask(It.Is<string>(s => s == "Task1"), It.IsAny<string>()))
                .Returns("Task1");
            mockTaskGenerator.Setup(tg => tg.GenerateTask(It.Is<string>(s => s.StartsWith("UnknownTask")), It.IsAny<string>()))
                .Returns(TaskConstants.Unknown);

            var timesheetGenerator = new TimesheetGenerator(mockTaskGenerator.Object, mockDataProvider.Object);

            // Act
            var result = timesheetGenerator.ProcessEntries(timeEntries);

            // Assert
            Assert.Equal(2, result.TimesheetData[TaskConstants.Unknown].DayTime.Count);
            Assert.Equal(1.0, result.TimesheetData[TaskConstants.Unknown].DayTime[DateTime.Parse("2023-10-01", CultureInfo.InvariantCulture)]);
            Assert.Equal(3.0, result.TimesheetData[TaskConstants.Unknown].DayTime[DateTime.Parse("2023-10-02", CultureInfo.InvariantCulture)]);

            Assert.Equal(2, result.UnknownTasks.Count);
            Assert.Equal("UnknownTask1", result.UnknownTasks[0].Description);
            Assert.Equal("ProjectA", result.UnknownTasks[0].Project);
            Assert.Equal("UnknownTask2", result.UnknownTasks[1].Description);
            Assert.Equal("ProjectB", result.UnknownTasks[1].Project);
        }

        [Fact]
        public void GenerateAndSave_ShouldGenerateAndSaveTimesheetCorrectly()
        {
            // Arrange
            var mockTaskGenerator = new Mock<ITaskGenerator>();
            var mockDataProvider = new Mock<IDataProvider>();

            var timeEntries = new List<TimeEntry>
            {
                new()
                {
                    RawStartDate = "2023-10-01",
                    RawDuration = "02:30:00",
                    Project = "ProjectA",
                    Description = "Task1"
                },
                new()
                {
                    RawStartDate = "2023-10-01",
                    RawDuration = "01:00:00",
                    Project = "ProjectA",
                    Description = "Task2"
                },
                new()
                {
                    RawStartDate = "2023-10-02",
                    RawDuration = "03:00:00",
                    Project = "ProjectB",
                    Description = "UnknownTask"
                }
            };

            mockDataProvider.Setup(dp => dp.LoadTimeEntries(It.IsAny<string>())).Returns(timeEntries);
            mockTaskGenerator.Setup(tg => tg.GenerateTask(It.Is<string>(s => s != "UnknownTask"), It.IsAny<string>()))
                .Returns<string, string>((desc, proj) => desc);
            mockTaskGenerator.Setup(tg => tg.GenerateTask(It.Is<string>(s => s == "UnknownTask"), It.IsAny<string>()))
                .Returns(TaskConstants.Unknown);

            var timesheetGenerator = new TimesheetGenerator(mockTaskGenerator.Object, mockDataProvider.Object);

            // Act
            var inputFile = "path/to/timeentries.csv";
            var outputFile = "path/to/output.csv";
            timesheetGenerator.GenerateAndSave(inputFile, outputFile);

            // Assert
            mockDataProvider.Verify(dp => dp.LoadTimeEntries(It.IsAny<string>()), Times.Once);

            var oct1 = DateTime.Parse("2023-10-01", CultureInfo.InvariantCulture);
            var oct2 = DateTime.Parse("2023-10-02", CultureInfo.InvariantCulture);

            mockDataProvider.Verify(dp => dp.SaveTimesheet(
                It.Is<Dictionary<string, ReportedTimeEntry>>(dict =>
                    dict.Count == 3 &&
                    Math.Abs(dict["Task1"].DayTime[oct1] - 2.5) < 0.01 &&
                    Math.Abs(dict["Task2"].DayTime[oct1] - 1) < 0.01 &&
                    Math.Abs(dict[TaskConstants.Unknown].DayTime[oct2] - 3) < 0.01
                ),
                It.Is<List<DateTime>>(dates =>
                    dates.Count == 2 &&
                    dates.Contains(oct1) &&
                    dates.Contains(oct2)
                ),
                It.IsAny<string>(),
                It.Is<IEnumerable<(string Description, string Project)>>(unknownTasks =>
                    unknownTasks.Count() == 1 &&
                    unknownTasks.First().Description == "UnknownTask" &&
                    unknownTasks.First().Project == "ProjectB"
                )
            ), Times.Once);
        }

        [Fact]
        public void GenerateData_ShouldReturnMemoryStreamWithProcessedData()
        {
            // Arrange
            var mockTaskGenerator = new Mock<ITaskGenerator>();
            var mockDataProvider = new Mock<IDataProvider>();
            var entries = new List<TimeEntry>
            {
                new()
                {
                    Description = "Task1",
                    Project = "Project1",
                    RawStartDate = DateTime.Today.ToString("yyyy-MM-dd"),
                    RawDuration = "02:30:00"
                },
                new()
                {
                    Description = "UnknownTask",
                    Project = "Project2",
                    RawStartDate = DateTime.Today.ToString("yyyy-MM-dd"),
                    RawDuration = "03:00:00"
                }
            };

            mockDataProvider.Setup(dp => dp.LoadTimeEntriesFromStream(It.IsAny<Stream>())).Returns(entries);
            mockTaskGenerator.Setup(tg => tg.GenerateTask(It.Is<string>(s => s == "Task1"), It.IsAny<string>()))
                .Returns("Task1");
            mockTaskGenerator.Setup(tg => tg.GenerateTask(It.Is<string>(s => s == "UnknownTask"), It.IsAny<string>()))
                .Returns(TaskConstants.Unknown);

            var timesheetGenerator = new TimesheetGenerator(mockTaskGenerator.Object, mockDataProvider.Object);
            var inputStream = new MemoryStream();
            using (var writer = new StreamWriter(inputStream, leaveOpen: true))
            {
                var csvWriter = new CsvWriter(writer, CultureInfo.InvariantCulture);
                csvWriter.WriteRecords(entries);
                writer.Flush();
                inputStream.Position = 0;
            }

            // Act
            timesheetGenerator.GenerateData(inputStream);

            // Assert
            mockDataProvider.Verify(dp => dp.SaveTimesheetToStream(
                It.IsAny<StreamWriter>(),
                It.Is<Dictionary<string, ReportedTimeEntry>>(dict =>
                    dict.Count == 2 &&
                    Math.Abs(dict["Task1"].DayTime[DateTime.Today] - 2.5) < 0.01 &&
                    Math.Abs(dict[TaskConstants.Unknown].DayTime[DateTime.Today] - 3) < 0.01
                ),
                It.Is<List<DateTime>>(dates =>
                    dates.Count == 1 &&
                    dates.Contains(DateTime.Today)
                ),
                It.Is<IEnumerable<(string Description, string Project)>>(unknownTasks =>
                    unknownTasks.Count() == 1 &&
                    unknownTasks.First().Description == "UnknownTask" &&
                    unknownTasks.First().Project == "Project2"
                )
            ), Times.Once);
        }
    }
}
