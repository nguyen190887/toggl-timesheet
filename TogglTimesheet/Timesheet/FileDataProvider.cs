// Generated by Copilot
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using CsvHelper;

namespace TogglTimesheet.Timesheet
{
    public interface IDataProvider
    {
        List<TimeEntry> LoadTimeEntriesFromStream(Stream inputStream);
        List<TimeEntry> LoadTimeEntries(string inputFile);
        void SaveTimesheet(Dictionary<string, ReportedTimeEntry> entries, IEnumerable<DateTime> timesheetDays, string outputFile);
        void SaveTimesheet(
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays,
            string outputFile,
            IEnumerable<(string Description, string Project)> unknownTasks);
        void SaveTimesheetToStream(
            StreamWriter writer,
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays);
        void SaveTimesheetToStream(
            StreamWriter writer,
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays,
            IEnumerable<(string Description, string Project)> unknownTasks);
        void SaveTimesheetToStream(
            StreamWriter writer,
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays,
            IEnumerable<(string Description, string Project)> unknownTasks,
            Dictionary<DateTime, double>? unroundedTotals);
    }

    public class FileDataProvider : IDataProvider
    {
        private static string FormatDuration(double duration)
        {
            return Math.Round(duration, 2, MidpointRounding.AwayFromZero).ToString("G", CultureInfo.InvariantCulture);
        }

        public List<TimeEntry> LoadTimeEntriesFromStream(Stream inputStream)
        {
            using var reader = new StreamReader(inputStream);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            return csv.GetRecords<TimeEntry>().ToList();
        }

        public List<TimeEntry> LoadTimeEntries(string inputFile)
        {
            using var reader = new StreamReader(inputFile);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            return csv.GetRecords<TimeEntry>().ToList();
        }

        public void SaveTimesheet(Dictionary<string, ReportedTimeEntry> entries, IEnumerable<DateTime> timesheetDays, string outputFile)
        {
            if (outputFile == null)
            {
                throw new InvalidOperationException("Output file path cannot be null.");
            }

            using var writer = new StreamWriter(outputFile);
            SaveTimesheetToStream(writer, entries, timesheetDays);
        }

        public void SaveTimesheet(
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays,
            string outputFile,
            IEnumerable<(string Description, string Project)> unknownTasks)
        {
            if (outputFile == null)
            {
                throw new InvalidOperationException("Output file path cannot be null.");
            }

            using var writer = new StreamWriter(outputFile);
            SaveTimesheetToStream(writer, entries, timesheetDays, unknownTasks);
        }

        public void SaveTimesheetToStream(StreamWriter writer, Dictionary<string, ReportedTimeEntry> entries, IEnumerable<DateTime> timesheetDays)
        {
            SaveTimesheetToStream(writer, entries, timesheetDays, Enumerable.Empty<(string Description, string Project)>(), null);
        }

        public void SaveTimesheetToStream(
            StreamWriter writer,
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays,
            IEnumerable<(string Description, string Project)> unknownTasks)
        {
            SaveTimesheetToStream(writer, entries, timesheetDays, unknownTasks, null);
        }

        public void SaveTimesheetToStream(
            StreamWriter writer,
            Dictionary<string, ReportedTimeEntry> entries,
            IEnumerable<DateTime> timesheetDays,
            IEnumerable<(string Description, string Project)> unknownTasks,
            Dictionary<DateTime, double>? unroundedTotals)
        {
            using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
            var headers = timesheetDays.Select(x => x.ToString("yyyy-MM-dd")).ToList();
            headers.Insert(0, "Task");
            csv.WriteField(headers);
            csv.NextRecord();

            foreach (var entry in entries)
            {
                var timeEntry = entry.Value;
                csv.WriteField(timeEntry.Task);
                foreach (var day in timesheetDays)
                {
                    if (!timeEntry.DayTime.TryGetValue(day, out var duration))
                    {
                        duration = 0;
                    }
                    csv.WriteField(FormatDuration(duration));
                }
                csv.NextRecord();
            }

            // Add separator row between time entries and total rows
            csv.WriteField("---");
            foreach (var _ in timesheetDays)
            {
                csv.WriteField("");
            }
            csv.NextRecord();

            // Add unrounded total row if provided
            if (unroundedTotals != null)
            {
                csv.WriteField("Total (unrounded)");
                foreach (var day in timesheetDays)
                {
                    csv.WriteField(FormatDuration(unroundedTotals.TryGetValue(day, out var val) ? val : 0));
                }
                csv.NextRecord();
            }

            // Add sum row (rounded)
            csv.WriteField("Total");
            foreach (var day in timesheetDays)
            {
                var dayTotal = entries.Values.Sum(entry =>
                {
                    if (entry.DayTime.TryGetValue(day, out var duration))
                    {
                        return duration;
                    }
                    return 0;
                });
                csv.WriteField(FormatDuration(dayTotal));
            }
            csv.NextRecord();

            // Add unknown tasks if any
            if (unknownTasks.Any())
            {
                csv.WriteField("---");
                foreach (var _ in timesheetDays)
                {
                    csv.WriteField("");
                }
                csv.NextRecord();

                csv.WriteField("Unknown Tasks");
                foreach (var _ in timesheetDays)
                {
                    csv.WriteField("");
                }
                csv.NextRecord();

                foreach (var (description, project) in unknownTasks)
                {
                    csv.WriteField($"{description} (project: {project})");
                    foreach (var _ in timesheetDays)
                    {
                        csv.WriteField("");
                    }
                    csv.NextRecord();
                }
            }
        }
    }
}
